% ----------------------------------------------------------------------
%  MAIN PROGRAM - generated by the Rappture Builder
% ----------------------------------------------------------------------

% open the XML file containing the run parameters
% the file name comes in from the command-line via variable 'infile'
io = rpLib(infile);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get input values from Rappture
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% get input value for input.number(QDDia) and convert to nm
str = rpLibGetString(io,'input.number(QDDia).current');
[QDDia,err] = rpUnitsConvertDbl(str, 'nm');

% get input value for input.number(QDH) and convert to nm
str = rpLibGetString(io,'input.number(QDH).current');
[QDH,err] = rpUnitsConvertDbl(str, 'nm');

% get input value for input.number(QDDen) and convert to cm-2
str = rpLibGetString(io,'input.number(QDDen).current');
[QDDen,err] = rpUnitsConvertDbl(str, 'cm-2');

% get input value for input.number(WL) and convert to nm
str = rpLibGetString(io,'input.number(WL).current');
[WL,err] = rpUnitsConvertDbl(str, 'nm');

% get input value for input.group(Sub).choice(SubIII)
SubIII = rpLibGetString(io,'input.group(Sub).choice(SubIII).current');

% get input value for input.group(Sub).choice(SubV)
SubV = rpLibGetString(io,'input.group(Sub).choice(SubV).current');

% get input value for input.group(Sub).number(Subx)
Subx = rpLibGetDouble(io,'input.group(Sub).number(Subx).current');

% get input value for input.group(Sub).number(Suby)
Suby = rpLibGetDouble(io,'input.group(Sub).number(Suby).current');

% get input value for input.group(QD).choice(QDIII)
QDIII = rpLibGetString(io,'input.group(QD).choice(QDIII).current');

% get input value for input.group(QD).choice(QDV)
QDV = rpLibGetString(io,'input.group(QD).choice(QDV).current');

% get input value for input.group(QD).number(QDx)
QDx = rpLibGetDouble(io,'input.group(QD).number(QDx).current');

% get input value for input.group(QD).number(QDy)
QDy = rpLibGetDouble(io,'input.group(QD).number(QDy).current');

% get input value for input.group(SC).choice(SCIII)
SCIII = rpLibGetString(io,'input.group(SC).choice(SCIII).current');

% get input value for input.group(SC).choice(SCV)
SCV = rpLibGetString(io,'input.group(SC).choice(SCV).current');

% get input value for input.group(SC).number(SCx)
SCx = rpLibGetDouble(io,'input.group(SC).number(SCx).current');

% get input value for input.group(SC).number(SCy)
SCy = rpLibGetDouble(io,'input.group(SC).number(SCy).current');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Add your code here for the main body of your program
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% spit out progress messages as you go along...
%rpUtilsProgress(0, 'Starting...');
%rpUtilsProgress(5, 'Loading data...');
%rpUtilsProgress(50, 'Half-way there');
%rpUtilsProgress(100, 'Done');

% Unit Conversions -----------------------------------------
QDDensity=QDDen * 1e-16; %Angstrom^-2 {5e-6 A^-2 = 5e10 cm^-2}
QDDiameter=QDDia * 10; %Angstrom
QDHeight=QDH * 10; %Angstrom
WLThickness=WL * 10; %Angstrom

% Parse Material Selection ---------------------------------
[AC,BC,AD,BD] = parseSelection(SubIII, SubV);
[aSub,c11iSub,c12iSub,c11aSub,c12aSub] = calcMaterial(AC,AD,Subx,BC,BD,Suby);

[AC,BC,AD,BD] = parseSelection(QDIII, QDV);
[aQD,c11iQD,c12iQD,c11aQD,c12aQD] = calcMaterial(AC,AD,QDx,BC,BD,QDy);

[AC,BC,AD,BD] = parseSelection(SCIII, SCV);
[aSC,c11iSC,c12iSC,c11aSC,c12aSC] = calcMaterial(AC,AD,SCx,BC,BD,SCy);


% Stiffness Calculations ----------------------------------
%Interpolated stiffness ratios
ASCi=c11iSC + c12iSC - (2*c12iSC.^2./c11iSC);
AQDi=c11iQD + c12iQD - (2*c12iQD.^2./c11iQD);

%Adachi equation stiffness ratios
ASCa=c11aSC + c12aSC - (2*c12aSC.^2./c11aSC);
AQDa=c11aQD + c12aQD - (2*c12aQD.^2./c11aQD);


% QD Volume Calculations -----------------------------------
% QD as spherical cap
vQDSphCap=pi.*QDHeight./6 .* (3 .*(QDDiameter/2).^2 + QDHeight.^2);

% QD as cylinder
QDsigma=(QDDiameter/2)^2*pi; %QD base area
vQDCyl=QDHeight*QDsigma;

% QD as oblate hemispheroid
vQDOblSph=((4/3)*pi*(QDDiameter/2)^2*QDHeight)/2;

% Strain Compensation Calculations -------------------------
% CET QD Thickness
CETQDi=QDHeight*((AQDi .* aSC^2 .* (aSub - aQD))./(ASCi .* aQD^2 .* (aSC - aSub)))/10;
CETQDa=QDHeight*((AQDa .* aSC^2 .* (aSub - aQD))./(ASCa .* aQD^2 .* (aSC - aSub)))/10;

%CET WL Thickness
CETWLi=WLThickness*((AQDi .* aSC^2 .* (aSub - aQD))./(ASCi .* aQD^2 .* (aSC - aSub)))/10;
CETWLa=WLThickness*((AQDa .* aSC^2 .* (aSub - aQD))./(ASCa .* aQD^2 .* (aSC - aSub)))/10;

%Effective coverage of QD material (Cylinder)
tQDWLCyl=(QDsigma*QDDensity)*QDHeight+(1-QDsigma*QDDensity)*WLThickness;

%mCET Cylinder
mCETcyli=(QDsigma*QDDensity)*CETQDi + (1-QDsigma*QDDensity)*CETWLi; %weighted SC thickness
mCETcyla=(QDsigma*QDDensity)*CETQDa + (1-QDsigma*QDDensity)*CETWLa; %weighted SC thickness

%Effective coverage of QD material (Oblate Hemispheroid)
tQD=vQDOblSph*QDDensity; %volume of QD times QD density gives average thickness of QD per area
tQDWL=WLThickness+tQD; %WL is treated as external to QD

%mCET Oblate Hemispheroid
mCETsphi=tQDWL*((AQDi .* aSC^2 .* (aSub - aQD))./(ASCi .* aQD^2 .* (aSC - aSub)))/10;
mCETspha=tQDWL*((AQDa .* aSC^2 .* (aSub - aQD))./(ASCa .* aQD^2 .* (aSC - aSub)))/10;

%set(handles.QDVolSphCap,'String',num2str(vQDSphCap/1000,4)) %convert to nm^3 from A^3
%set(handles.QDVolCyl,'String',num2str(vQDCyl/1000,4)) %convert to nm^3 from A^3
%set(handles.QDVolOblSph,'String',num2str(vQDOblSph/1000,4)) %convert to nm^3 from A^3

%set(handles.QDCoverageQW,'String',num2str(QDHeight/10,4)) %convert to nm^3 cm^-2 from A^3 cm^-2
%set(handles.QDCoverageCyl,'String',num2str(tQDWLCyl/10,4))
%set(handles.QDCoverageOblSph,'String',num2str(tQDWL/10,4))

%set(handles.CET,'String',num2str(CETQD,4))
%set(handles.MCETCyl,'String',num2str(mCETcyl,4))
%set(handles.MCETSphere,'String',num2str(mCETsph,4))

%set(handles.aSub,'String',num2str(aSub))
%set(handles.aQD,'String',num2str(aQD))
%set(handles.aSC,'String',num2str(aSC))

%set(handles.C11Sub,'String',num2str(c11Sub,4))
%set(handles.C11QD,'String',num2str(c11QD,4))
%set(handles.C11SC,'String',num2str(c11SC,4))

%set(handles.C12Sub,'String',num2str(c12Sub,4))
%set(handles.C12QD,'String',num2str(c12QD,4))
%set(handles.C12SC,'String',num2str(c12SC,4))

%guidata(hObject,handles)

results=num2str(mCETsph,4);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Save output values back to Rappture
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% save output value for output.string(results)
rpLibPutString(io,'output.string(results).current',results,0);


rpLibResult(io);
quit;
